Google App Engineの2nd Generationバージョンアップ

goのバージョンなどが変わることにより
影響やこれを実施しないことによる影響、実施したときのボリュームなどについて
アドバイス頂きたいです。

[go自体のバージョンについて]
- 公式ドキュメントによるGoのバージョン差
  - Go first generationとSecond generationの違い
  - Go言語のサポート
    - 1st 1.11 -> 2nd 1.12+
  - Go言語についてはGoogle app engine上での、機能差はドキュメント上存在しない。
  - スタンダート環境でのGoのバージョンのことであり、フレキシブル環境は任意のGo versionを選ぶことができる。
    ※2nd generationはあくまでスタンダート環境のことを指すので、今回は対象外。
  - 詳細は公式：https://cloud.google.com/appengine/docs/standard/runtimes

- Go 1.1 -> 1.2の移行について
  - Goはメジャーバージョン間で、後方互換性を持っているので、ソースコードの書き換えは基本発生しない
  - ただし、Go標準ライブラリ以外では必ずバージョン追随されいているかは保証しきれないので、テストで確認したほうが良い
    - バージョン影響を極力抑える方法
    - テストを行いリリースができればいいですが、それが十分にできない場合のみマイナーバージョンを指定して実行することをオススメします。
    - 注意：api_versionは非推奨となっていますので、app.yamlでruntime: go111を指定することで極小化できるかもしれないです。

- App engineの仕様変更
  - Goのバージョン差異よりもgoogle app engineのAPIが廃止されたり、非推奨になっていることが影響が大きいようです。
  - 以下については対応したケースが多いですので、 影響範囲を調べる上でご検討いただけますと幸いです。


[影響が大きそうなポイント]
1. パッケージ非推奨：appengine パッケージと google.golang.org/appengine
https://cloud.google.com/appengine/docs/standard/go/go-differences#migrating-appengine-sdk
- 基本的にはgoの標準パッケージを利用すれば対応可能なようです。
App Engine パッケージ	=>  Go 標準ライブラリ パッケージ
cloudsql パッケージ	=>  database/sql パッケージ
file パッケージ	=>  os パッケージ
log パッケージ	=>  log パッケージ
socket パッケージ	=>  net パッケージ
urlfetch パッケージ	=>  net/http パッケージ

2. app.yaml ファイルの変更
- loginが利用できなくなっていますので、それが指定されている場合は、別の方法で認証をする必要があります。

3.GOPATH へのファイルの移動
- importが相対パスが使えなくなっているので、該当がある場合は修正が必要です。

4. AppEngine log が利用できなくなる
- 仮に使われている場合は、運用向けの影響が出る可能性があります。
- ログのフォーマットや取り回しの方法など変更に影響があると思われます。

[質問へのご回答]
＞これを実施しないことによる影響、実施したときのボリュームなどについて
実施したときのボリュームは該当によりますので上記変更ポイントからソースコードを調べていただき影響を調べることになるのかと。
実施しないことの影響は現在としては、Google自体もGo1.11は長期サポートとしていますので、今のところは大きな問題はないと思います。
ただし、Go 1.6-1.9のバージョンであればできる限り早く1.11に1st generationでも上げておくことが推奨されています。


[移行で手こずった話のリンクなど]
https://blog.toshimaru.net/gae-first-to-second-generation/
https://tech.mercari.com/entry/2019/05/22/122803
https://qiita.com/kimihiro_n/items/5d373440acc48488a837

